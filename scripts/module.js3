//log
/*
display - attributes - works
display - general - works - capital leters may cause problem with roll
display - advanced - wrong
display - items
display - talent
display - problem
display - weapons - not working??
roll - attributes
roll - general
roll - advanced
roll - items
roll - talent
roll - problem
roll - attack?

*/

export let CoriolisActionHandler = null
export let CoriolisRollHandler = null
export let CoriolisSystemManager = null

Hooks.on('tokenActionHudCoreApiReady', async (coreModule) => {

    const ATTRIBUTES_ID = 'attributes';
    const GENERAL_ID    = 'generals';
    const ADVANCED_ID   = 'advanceds';
    const WEAPON_ID     = 'weapons';

    const ACTION_ATTRIBUTES = 'attribute';
    const ACTION_GENERAL    = 'general';
    const ACTION_ADVANCED   = 'advanced';
    const ACTION_WEAPON     = 'weapon';

    /* ACTIONS */

    CoriolisActionHandler = class CoriolisActionHandler extends coreModule.api.ActionHandler {
 //       constructor() {
 //       }

        /** @override */
        async buildSystemActions(groupIds) {
            // We don't support MULTIPLE tokens being selected at the same time.
            //this.actors = (!this.actor) ? this._getActors() : [this.actor]
            //this.tokens = (!this.token) ? this._getTokens() : [this.token]
            //this.actorType = this.actor?.type

            const token = this.token;
            if (!token) return;
            const tokenId = token.id;
            const actor = this.actor;
            if (!actor) return;

            this._getAttributes({ id: ATTRIBUTES_ID, type: 'system' });
            this._getGeneral   ({ id: GENERAL_ID,    type: 'system' });
            this._getAdvanced  ({ id: ADVANCED_ID,   type: 'system' });
            this._getWeapon    ({ id: WEAPON_ID,     type: 'system' });
    //        this._getCombat   ({ id: COMBAT_ID,    type: 'system' })
    //        this._getAbilities({ id: ABILITIES_ID, type: 'system' })
    //        this._getTags     ({ id: TAGS_ID,      type: 'system' })
        
            //if (settings.get("showHudTitle")) result.hudTitle = token.name;
			console.log("test");
        }
        
        _getAttributes(parent) {
            // Loading attributes into the list.
            let actions = [ "strength", "agility", "wits", "empathy" ].map( key => {
                return {
                    id: key,
                    name: game.i18n.localize(`YZECORIOLIS.Attr${key.capitalize()}`),
                    encodedValue: [ACTION_ATTRIBUTES, key.capitalize()].join(this.delimiter)
                }
            });
            console.log(actions);
            this.addActions(actions, parent);

        }
        
        _getGeneral(parent) {
            // Loading attributes into the list.
    //let actions = [ "dexterity", "force", "infiltration", "manipulation", "meleeCombat", "observation", "rangedCombat", "survival", "command", "culture", "dataDjinn", "medicurgy", "mysticPowers", "pilot", "science", "technology" ].map( key => {

            let actions = [ "dexterity", "force", "infiltration", "manipulation", "meleeCombat", "observation", "rangedCombat", "survival" ].map( key => {
                return {
                    id: key,
                    name: game.i18n.localize(`YZECORIOLIS.Skill${key.capitalize()}`),
                    encodedValue: [ACTION_GENERAL, key.capitalize()].join(this.delimiter)
                }
            });
            console.log(actions);
            this.addActions(actions, parent);

        }
        _getAdvanced(parent) {
            // Loading attributes into the list.
            let actions = [ "command", "culture", "dataDjinn", "medicurgy", "pilot", "science", "technology", "mysticPowers" ].map( key => {
                return {
                    id: key,
                    name: game.i18n.localize(`YZECORIOLIS.Skill${key.capitalize()}`),
                    encodedValue: [ACTION_ADVANCED, key.capitalize()].join(this.delimiter)
                }
            });
            console.log(actions);
            this.addActions(actions, parent);

        }
        _getWeapon(parent) {
            // Loading attributes into the list.
            let weaponList = this.actor.items.filter(i => i.type === "weapon");
            let actions = weaponList.map(i => {
                return{
                    id: i._id, 
                    name: i.name, 
                    encodedValue: [ACTION_ATTRIBUTES, i._id].join(this.delimiter),
                    img: i.img
                    }
                    }
                    );
        
            console.log(actions);
            this.addActions(actions, parent);

        }

    }


    /* ROLL HANDLER */

    CoriolisRollHandler = class CoriolisRollHandler extends coreModule.api.RollHandler {
        doHandleActionEvent(event, encodedValue) {
            let payload = encodedValue.split("|");
        
            if (payload.length != 4) {
            super.throwInvalidValueErr();
            }
        
            const macroType = payload[0];
            const actionId = payload[1];

            if (this.isRenderItem()) {
                this.doRenderItem(this.actor, actionId);
                return;
            }
                
            switch (macroType) {
            case ACTION_ATTRIBUTES:
                game.yzecoriolis.rollEngineMain({actorUuid: this.actor.uuid, attribute: actionId});
                break;
            case ACTION_GENERAL:
                // item-roll
                game.yzecoriolis.itemRollMacro(this.actor, actionId, "", "", "", "", "", "", "", "", "", "", "", "", false, "")
                break;
            
            }

            // Ensure the HUD reflects the new conditions
            Hooks.callAll('forceUpdateTokenActionHud');
        }
    }

    // Core Module Imports

    CoriolisSystemManager = class CoriolisSystemManager extends coreModule.api.SystemManager {
        /** @override */
        doGetActionHandler () {
            return new CoriolisActionHandler()
        }

        /** @override */
        getAvailableRollHandlers () {
            const choices = { core: "Coriolis RPG" };
            return choices
        }

        /** @override */
        doGetRollHandler (handlerId) {
            return new CoriolisRollHandler()
        }

        /** @override */
        /*doRegisterSettings (updateFunc) {
            systemSettings.register(updateFunc)
        }*/

        async doRegisterDefaultFlags () {
            const ATTRIBUTES_NAME    = game.i18n.localize('YZECORIOLIS.Attributes');
            const GENERAL_NAME		 = game.i18n.localize('YZECORIOLIS.SkillCatGeneral');
            const ADVANCED_NAME		 = game.i18n.localize('YZECORIOLIS.SkillCatAdvanced');
            const WEAPON_NAME		 = game.i18n.localize('YZECORIOLIS.Weapons');
            const DEFAULTS = {
                layout: [
                    { 
                        nestId: ATTRIBUTES_ID,
                        id:     ATTRIBUTES_ID,
                        name:   ATTRIBUTES_NAME,
                        type:   'system',
                        groups: [
                            {
                                nestId: 'attributes_attributes',
                                id:     ATTRIBUTES_ID,
                                name:   ATTRIBUTES_NAME,
                                type:   'system'
                            }
                        ]
                    },
                    { 
                        nestId: GENERAL_ID,
                        id:     GENERAL_ID,
                        name:   GENERAL_NAME,
                        type:   'system',
                        groups: [
                            {
                                nestId: 'general_general',
                                id:     GENERAL_ID,
                                name:   GENERAL_NAME,
                                type:   'system'
                            }
                        ]
                    },
                    { 
                        nestId: ADVANCED_ID,
                        id:     ADVANCED_ID,
                        name:   ADVANCED_NAME,
                        type:   'system',
                        groups: [
                            {
                                nestId: 'advanced_advanced',
                                id:     ADVANCED_ID,
                                name:   ADVANCED_NAME,
                                type:   'system'
                            }
                        ]
                    },
                    { 
                        nestId: WEAPON_ID,
                        id:     WEAPON_ID,
                        name:   WEAPON_NAME,
                        type:   'system',
                        groups: [
                            {
                                nestId: 'weapon_weapon',
                                id:     WEAPON_ID,
                                name:   WEAPON_NAME,
                                type:   'system'
                            }
                        ]
                    }
                ],
                groups: [
                    { id: ATTRIBUTES_ID, name: ATTRIBUTES_NAME, type: 'system' },
                    { id: GENERAL_ID, name: GENERAL_NAME, type: 'system' },
                    { id: ADVANCED_ID, name: ADVANCED_NAME, type: 'system' },
                    { id: WEAPON_ID, name: WEAPON_NAME, type: 'system' }
                ]
            }

            // HUD CORE v1.2 wants us to return the DEFAULTS
            return DEFAULTS;
        }
    }

    /* STARTING POINT */

    const module = game.modules.get('token-action-hud-coriolis');
    module.api = {
        requiredCoreModuleVersion: '1.4',
        SystemManager: CoriolisSystemManager
    }    
     Hooks.call('tokenActionHudSystemReady', module)
});
